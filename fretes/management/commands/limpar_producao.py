from django.core.management.base import BaseCommand
from django.db import transaction
from fretes.models import FreteRequest, Destino, CotacaoFrete
from django.contrib.auth.models import User
from django.conf import settings


class Command(BaseCommand):
    help = 'Limpa dados de produ√ß√£o no Render (apenas fretes, mant√©m usu√°rios)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--confirm-producao',
            action='store_true',
            help='Confirma a opera√ß√£o de limpeza em produ√ß√£o',
        )

    def handle(self, *args, **options):
        # Verificar se est√° em produ√ß√£o
        if not settings.DEBUG:
            self.stdout.write(
                self.style.WARNING(
                    'üåê Executando em ambiente de PRODU√á√ÉO'
                )
            )
        else:
            self.stdout.write(
                self.style.WARNING(
                    '‚ö†Ô∏è  ATEN√á√ÉO: Este comando √© para PRODU√á√ÉO!'
                )
            )

        if not options['confirm_producao']:
            self.stdout.write(
                self.style.ERROR(
                    '‚ùå ERRO: Use --confirm-producao para executar em produ√ß√£o!\n'
                    'Este comando ir√° remover TODOS os fretes do ambiente de produ√ß√£o.'
                )
            )
            return

        with transaction.atomic():
            # Contar registros antes da limpeza
            total_fretes = FreteRequest.objects.count()
            total_destinos = Destino.objects.count()
            total_cotacoes = CotacaoFrete.objects.count()
            total_usuarios = User.objects.count()

            self.stdout.write(f'üìä Dados atuais em produ√ß√£o:')
            self.stdout.write(f'   - Fretes: {total_fretes}')
            self.stdout.write(f'   - Destinos: {total_destinos}')
            self.stdout.write(f'   - Cota√ß√µes: {total_cotacoes}')
            self.stdout.write(f'   - Usu√°rios: {total_usuarios}')

            if total_fretes == 0:
                self.stdout.write(
                    self.style.SUCCESS(
                        '‚úÖ Banco de produ√ß√£o j√° est√° limpo!'
                    )
                )
                return

            # Limpar cota√ß√µes primeiro (devido √†s foreign keys)
            self.stdout.write('\nüóëÔ∏è  Removendo cota√ß√µes de produ√ß√£o...')
            cotacoes_removidas = CotacaoFrete.objects.count()
            CotacaoFrete.objects.all().delete()
            self.stdout.write(f'   ‚úÖ {cotacoes_removidas} cota√ß√µes removidas')

            # Limpar destinos
            self.stdout.write('üóëÔ∏è  Removendo destinos de produ√ß√£o...')
            destinos_removidos = Destino.objects.count()
            Destino.objects.all().delete()
            self.stdout.write(f'   ‚úÖ {destinos_removidos} destinos removidos')

            # Limpar fretes
            self.stdout.write('üóëÔ∏è  Removendo fretes de produ√ß√£o...')
            fretes_removidos = FreteRequest.objects.count()
            FreteRequest.objects.all().delete()
            self.stdout.write(f'   ‚úÖ {fretes_removidos} fretes removidos')

            # Manter usu√°rios (nunca remover em produ√ß√£o)
            self.stdout.write('üë• Usu√°rios mantidos em produ√ß√£o')

        # Verificar limpeza
        fretes_restantes = FreteRequest.objects.count()
        destinos_restantes = Destino.objects.count()
        cotacoes_restantes = CotacaoFrete.objects.count()
        usuarios_restantes = User.objects.count()

        self.stdout.write(f'\n‚úÖ Limpeza de produ√ß√£o conclu√≠da!')
        self.stdout.write(f'üìä Dados restantes em produ√ß√£o:')
        self.stdout.write(f'   - Fretes: {fretes_restantes}')
        self.stdout.write(f'   - Destinos: {destinos_restantes}')
        self.stdout.write(f'   - Cota√ß√µes: {cotacoes_restantes}')
        self.stdout.write(f'   - Usu√°rios: {usuarios_restantes}')

        if fretes_restantes == 0 and destinos_restantes == 0 and cotacoes_restantes == 0:
            self.stdout.write(
                self.style.SUCCESS(
                    '\nüéâ Banco de produ√ß√£o limpo com sucesso! '
                    'Ambiente de produ√ß√£o pronto para demonstra√ß√µes.'
                )
            )
        else:
            self.stdout.write(
                self.style.WARNING(
                    '\n‚ö†Ô∏è  Ainda existem dados no banco de produ√ß√£o. '
                    'Verifique se h√° algum problema.'
                )
            )
