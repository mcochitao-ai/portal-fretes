from django.core.management.base import BaseCommand
from django.db import connection
from django.core.management import execute_from_command_line
import os

class Command(BaseCommand):
    help = 'For√ßa configura√ß√£o do PostgreSQL'

    def handle(self, *args, **options):
        self.stdout.write('üêò FOR√áANDO CONFIGURA√á√ÉO DO POSTGRESQL')
        self.stdout.write('=' * 60)
        
        # Mostrar ambiente
        self.stdout.write(f'üåç Ambiente: {"RENDER" if os.environ.get("RENDER") else "LOCAL"}')
        self.stdout.write(f'üóÑÔ∏è DATABASE_URL: {os.environ.get("DATABASE_URL", "N√ÉO DEFINIDA")[:50]}...')
        
        try:
            # 1. Verificar conex√£o
            self.stdout.write('\nüîå TESTANDO CONEX√ÉO:')
            with connection.cursor() as cursor:
                cursor.execute("SELECT version();")
                version = cursor.fetchone()
                self.stdout.write(f'   ‚úÖ Conectado! PostgreSQL: {version[0][:50]}...')
            
            # 2. Executar makemigrations
            self.stdout.write('\nüìù EXECUTANDO MAKEMIGRATIONS:')
            try:
                execute_from_command_line(['manage.py', 'makemigrations', '--verbosity=2'])
                self.stdout.write('   ‚úÖ Makemigrations executado!')
            except Exception as e:
                self.stdout.write(f'   ‚ö†Ô∏è Makemigrations: {e}')
            
            # 3. Executar migrate
            self.stdout.write('\nüöÄ EXECUTANDO MIGRATE:')
            try:
                execute_from_command_line(['manage.py', 'migrate', '--verbosity=2'])
                self.stdout.write('   ‚úÖ Migrate executado!')
            except Exception as e:
                self.stdout.write(f'   ‚ùå Migrate falhou: {e}')
            
            # 4. Verificar tabelas
            self.stdout.write('\nüìä VERIFICANDO TABELAS:')
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    ORDER BY table_name;
                """)
                tables = cursor.fetchall()
                self.stdout.write(f'   üìã Total de tabelas: {len(tables)}')
                for table in tables:
                    self.stdout.write(f'      - {table[0]}')
            
            # 5. Verificar se auth_user existe
            self.stdout.write('\nüë§ VERIFICANDO AUTH_USER:')
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT COUNT(*) 
                    FROM information_schema.tables 
                    WHERE table_name = 'auth_user';
                """)
                count = cursor.fetchone()[0]
                if count > 0:
                    self.stdout.write('   ‚úÖ Tabela auth_user existe!')
                    
                    # Contar usu√°rios
                    cursor.execute("SELECT COUNT(*) FROM auth_user;")
                    user_count = cursor.fetchone()[0]
                    self.stdout.write(f'   üë• Total de usu√°rios: {user_count}')
                else:
                    self.stdout.write('   ‚ùå Tabela auth_user N√ÉO existe!')
                    
        except Exception as e:
            self.stdout.write(f'‚ùå Erro geral: {e}')
            import traceback
            self.stdout.write(f'   Traceback: {traceback.format_exc()}')
        
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write('üèÅ CONFIGURA√á√ÉO POSTGRESQL COMPLETA!')
