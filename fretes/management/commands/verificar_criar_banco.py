from django.core.management.base import BaseCommand
from django.db import connection
import os

class Command(BaseCommand):
    help = 'Verifica e cria banco PostgreSQL se necess√°rio'

    def handle(self, *args, **options):
        self.stdout.write('üîç VERIFICANDO E CRIANDO BANCO POSTGRESQL...')
        self.stdout.write('=' * 60)
        
        # 1. Verificar configura√ß√£o atual
        self.stdout.write('\nüìä CONFIGURA√á√ÉO ATUAL:')
        db_config = connection.settings_dict
        self.stdout.write(f'   Engine: {db_config["ENGINE"]}')
        self.stdout.write(f'   Host: {db_config["HOST"]}')
        self.stdout.write(f'   Database: {db_config["NAME"]}')
        self.stdout.write(f'   User: {db_config["USER"]}')
        
        # 2. Verificar DATABASE_URL
        self.stdout.write('\nüåç DATABASE_URL:')
        database_url = os.environ.get('DATABASE_URL')
        if database_url:
            self.stdout.write(f'   ‚úÖ DATABASE_URL definida: {database_url[:50]}...')
        else:
            self.stdout.write('   ‚ùå DATABASE_URL N√ÉO definida!')
            self.stdout.write('   üîß Isso pode ser o problema!')
        
        # 3. Testar conex√£o
        self.stdout.write('\nüîå TESTE DE CONEX√ÉO:')
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                self.stdout.write('   ‚úÖ Conex√£o com banco: OK')
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro na conex√£o: {e}')
            self.stdout.write('   üîß Problema na conex√£o com o banco!')
            return
        
        # 4. Verificar se √© PostgreSQL
        if 'postgresql' not in db_config['ENGINE']:
            self.stdout.write('\n‚ùå PROBLEMA IDENTIFICADO:')
            self.stdout.write('   N√£o est√° usando PostgreSQL!')
            self.stdout.write('   Engine atual: ' + db_config['ENGINE'])
            self.stdout.write('   üîß Verifique a configura√ß√£o do DATABASE_URL')
            return
        
        # 5. Verificar tabelas
        self.stdout.write('\nüìã VERIFICANDO TABELAS:')
        try:
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                    ORDER BY table_name;
                """)
                tables = cursor.fetchall()
                
                if tables:
                    self.stdout.write(f'   ‚úÖ {len(tables)} tabelas encontradas')
                    for table in tables:
                        self.stdout.write(f'   - {table[0]}')
                else:
                    self.stdout.write('   ‚ùå Nenhuma tabela encontrada!')
                    self.stdout.write('   üîß As migra√ß√µes n√£o foram executadas')
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro ao verificar tabelas: {e}')
        
        # 6. Verificar se auth_user existe
        self.stdout.write('\nüë§ VERIFICANDO TABELA auth_user:')
        try:
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'auth_user'
                    );
                """)
                auth_user_exists = cursor.fetchone()[0]
                
                if auth_user_exists:
                    self.stdout.write('   ‚úÖ Tabela auth_user existe')
                else:
                    self.stdout.write('   ‚ùå Tabela auth_user N√ÉO existe!')
                    self.stdout.write('   üîß Execute: python manage.py migrate')
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro ao verificar auth_user: {e}')
        
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write('üèÅ VERIFICA√á√ÉO COMPLETA!')
        
        # 7. Recomenda√ß√µes
        self.stdout.write('\nüí° RECOMENDA√á√ïES:')
        if not database_url:
            self.stdout.write('   1. Verifique se o banco PostgreSQL foi criado no Render')
            self.stdout.write('   2. Verifique se a vari√°vel DATABASE_URL est√° configurada')
        elif not tables:
            self.stdout.write('   1. Execute: python manage.py makemigrations')
            self.stdout.write('   2. Execute: python manage.py migrate')
        else:
            self.stdout.write('   ‚úÖ Banco PostgreSQL configurado corretamente!')
