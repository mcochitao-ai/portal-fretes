from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.db import connection
import os

class Command(BaseCommand):
    help = 'Verifica se o sistema est√° funcionando'

    def handle(self, *args, **options):
        self.stdout.write('üîç VERIFICANDO SISTEMA COMPLETO...')
        self.stdout.write('=' * 60)
        
        # 1. Verificar configura√ß√£o do banco
        self.stdout.write('\nüìä CONFIGURA√á√ÉO DO BANCO:')
        db_config = connection.settings_dict
        self.stdout.write(f'   Engine: {db_config["ENGINE"]}')
        self.stdout.write(f'   Name: {db_config["NAME"]}')
        
        # 2. Testar conex√£o
        self.stdout.write('\nüîå TESTE DE CONEX√ÉO:')
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                self.stdout.write('   ‚úÖ Conex√£o com banco: OK')
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro na conex√£o: {e}')
            return
        
        # 3. Verificar tabelas
        self.stdout.write('\nüìã TABELAS NO BANCO:')
        try:
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' 
                    ORDER BY name;
                """)
                tables = cursor.fetchall()
                
                if tables:
                    self.stdout.write(f'   Total: {len(tables)} tabelas')
                    for table in tables:
                        self.stdout.write(f'   - {table[0]}')
                else:
                    self.stdout.write('   ‚ùå Nenhuma tabela encontrada!')
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro ao verificar tabelas: {e}')
        
        # 4. Verificar usu√°rios
        self.stdout.write('\nüë• USU√ÅRIOS NO BANCO:')
        try:
            users = User.objects.all()
            if users:
                self.stdout.write(f'   Total: {users.count()} usu√°rios')
                for user in users:
                    self.stdout.write(f'   - {user.username} (staff: {user.is_staff}, super: {user.is_superuser}, active: {user.is_active})')
            else:
                self.stdout.write('   ‚ùå Nenhum usu√°rio encontrado!')
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro ao verificar usu√°rios: {e}')
        
        # 5. Criar usu√°rio admin se n√£o existir
        self.stdout.write('\nüë§ CRIANDO USU√ÅRIO ADMIN...')
        try:
            if not User.objects.filter(username='admin').exists():
                User.objects.create_superuser(
                    username='admin',
                    email='admin@admin.com',
                    password='admin123'
                )
                self.stdout.write('   ‚úÖ Usu√°rio admin criado!')
            else:
                self.stdout.write('   ‚úÖ Usu√°rio admin j√° existe!')
            
            # Verificar se foi criado
            user = User.objects.get(username='admin')
            self.stdout.write(f'   ID: {user.id}')
            self.stdout.write(f'   is_staff: {user.is_staff}')
            self.stdout.write(f'   is_superuser: {user.is_superuser}')
            self.stdout.write(f'   is_active: {user.is_active}')
            
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro ao criar usu√°rio: {e}')
        
        # 6. Testar autentica√ß√£o
        self.stdout.write('\nüîê TESTE DE AUTENTICA√á√ÉO:')
        try:
            from django.contrib.auth import authenticate
            auth_user = authenticate(username='admin', password='admin123')
            if auth_user:
                self.stdout.write('   ‚úÖ Autentica√ß√£o funcionando!')
            else:
                self.stdout.write('   ‚ùå Autentica√ß√£o falhou!')
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro na autentica√ß√£o: {e}')
        
        # 7. Verificar vari√°veis de ambiente
        self.stdout.write('\nüåç VARI√ÅVEIS DE AMBIENTE:')
        env_vars = ['SECRET_KEY', 'DEBUG', 'ALLOWED_HOSTS']
        for var in env_vars:
            value = os.environ.get(var, 'N√ÉO DEFINIDA')
            if var == 'SECRET_KEY' and value != 'N√ÉO DEFINIDA':
                value = f'{value[:10]}...'
            self.stdout.write(f'   {var}: {value}')
        
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write('üèÅ VERIFICA√á√ÉO COMPLETA!')
        self.stdout.write('Teste com:')
        self.stdout.write('   Username: admin')
        self.stdout.write('   Password: admin123')
