from django.core.management.base import BaseCommand
from django.db import connection
from django.core.management import call_command
import os

class Command(BaseCommand):
    help = 'Fix database schema issues by ensuring all migrations are applied'

    def handle(self, *args, **options):
        self.stdout.write('üîß FIXING DATABASE SCHEMA')
        self.stdout.write('=' * 80)
        
        # Verificar se est√° no PostgreSQL
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            self.stdout.write('‚ùå DATABASE_URL n√£o encontrada - usando SQLite')
            return
        
        self.stdout.write('‚úÖ Usando PostgreSQL - corrigindo schema do banco')
        
        try:
            # 1. VERIFICAR TABELAS EXISTENTES
            self.stdout.write('\nüîç VERIFICANDO TABELAS EXISTENTES:')
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    ORDER BY table_name;
                """)
                tables = cursor.fetchall()
                table_names = [table[0] for table in tables]
                
                self.stdout.write(f'   üìã Tabelas encontradas: {len(table_names)}')
                for table in table_names:
                    self.stdout.write(f'      - {table}')
            
            # 2. VERIFICAR SE FRETES_USERPROFILE EXISTE
            if 'fretes_userprofile' not in table_names:
                self.stdout.write('\n‚ùå Tabela fretes_userprofile n√£o encontrada!')
                self.stdout.write('   üí° Executando migra√ß√µes...')
                
                # Executar migra√ß√µes
                call_command('migrate', verbosity=0)
                self.stdout.write('   ‚úÖ Migra√ß√µes executadas')
            else:
                self.stdout.write('\n‚úÖ Tabela fretes_userprofile encontrada')
                
                # 3. VERIFICAR COLUNAS DA TABELA FRETES_USERPROFILE
                self.stdout.write('\nüîç VERIFICANDO COLUNAS DA TABELA FRETES_USERPROFILE:')
                with connection.cursor() as cursor:
                    cursor.execute("""
                        SELECT column_name, data_type 
                        FROM information_schema.columns 
                        WHERE table_name = 'fretes_userprofile' 
                        ORDER BY column_name;
                    """)
                    columns = cursor.fetchall()
                    
                    self.stdout.write(f'   üìã Colunas encontradas: {len(columns)}')
                    for column in columns:
                        self.stdout.write(f'      - {column[0]} ({column[1]})')
                    
                    # Verificar se tipo_acesso existe
                    column_names = [col[0] for col in columns]
                    if 'tipo_acesso' not in column_names:
                        self.stdout.write('\n‚ùå Coluna tipo_acesso n√£o encontrada!')
                        self.stdout.write('   üí° Executando migra√ß√µes para corrigir...')
                        
                        # Executar migra√ß√µes
                        call_command('migrate', verbosity=0)
                        self.stdout.write('   ‚úÖ Migra√ß√µes executadas')
                    else:
                        self.stdout.write('\n‚úÖ Coluna tipo_acesso encontrada')
            
            # 4. VERIFICAR MIGRA√á√ïES APLICADAS
            self.stdout.write('\nüìù VERIFICANDO MIGRA√á√ïES APLICADAS:')
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT app, name, applied 
                    FROM django_migrations 
                    WHERE app = 'fretes' 
                    ORDER BY applied;
                """)
                migrations = cursor.fetchall()
                
                self.stdout.write(f'   üìã Migra√ß√µes aplicadas: {len(migrations)}')
                for migration in migrations:
                    self.stdout.write(f'      - {migration[0]}.{migration[1]} ({migration[2]})')
            
            # 5. TESTAR CRIAR UM USERPROFILE
            self.stdout.write('\nüß™ TESTANDO CRIA√á√ÉO DE USERPROFILE:')
            try:
                from django.contrib.auth.models import User
                from fretes.models import UserProfile
                
                # Verificar se existe pelo menos um usu√°rio
                if User.objects.exists():
                    user = User.objects.first()
                    self.stdout.write(f'   üë§ Testando com usu√°rio: {user.username}')
                    
                    # Tentar acessar o profile
                    try:
                        profile = user.userprofile
                        self.stdout.write(f'   ‚úÖ Profile encontrado: {profile.tipo_acesso}')
                    except UserProfile.DoesNotExist:
                        self.stdout.write('   ‚ö†Ô∏è Profile n√£o existe, criando...')
                        profile = UserProfile.objects.create(user=user)
                        self.stdout.write(f'   ‚úÖ Profile criado: {profile.tipo_acesso}')
                else:
                    self.stdout.write('   ‚ö†Ô∏è Nenhum usu√°rio encontrado no banco')
                    
            except Exception as e:
                self.stdout.write(f'   ‚ùå Erro ao testar UserProfile: {e}')
            
            self.stdout.write('\n‚úÖ VERIFICA√á√ÉO DE SCHEMA CONCLU√çDA!')
            
        except Exception as e:
            self.stdout.write(f'‚ùå ERRO: {e}')
            import traceback
            self.stdout.write(f'   Traceback: {traceback.format_exc()}')
        
        self.stdout.write('\n' + '=' * 80)
        self.stdout.write('üèÅ CORRE√á√ÉO DE SCHEMA COMPLETA!')
